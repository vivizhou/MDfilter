label = "testCleanedData")
setwd("E:/Rpackage/MDfilter/")
devtools::document()
devtools::install_github("vivizhou/MDfilter")
library(MDfilter)
remove.packages("MDfilter")
rm(MDfilter)
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
?clean.raw.data
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
?clean.raw.data
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
rm(MDfilter)
remove.packages("MDfilter")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
---
title: "ExampleMDfilter"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
```
## Import txt file from ANNOVAR annotation on vcf files
```{r}
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
```
## Import pedigree file
```{r}
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
```
Get included IDs (match the variant data file), affected IDs, and unaffected IDs. Also specify female and male IDs if X-linked recessive is assumed.
```{r}
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
```
## Clean imported data file
```{r}
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
```
## Filter the variants
```{r}
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
filteredVariants <- filter.variant(data.name = cleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
plot.pedigreeGT(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
plot.pedigreeGT(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
?plot.pedigreeGT
plot(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
View(plotPedigree)
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
remove.packages("MDfilter")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- importTXT(file.path)
importTXT
?importTXT
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- importTXT(file.path)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- cleanData(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
if (!require(tidyverse)) {
install.packages(tidyverse)
}
library(MDfilter)
library(tidyverse)
getwd()
filteredVariants <- filterVariant(data.name = cleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
remove.packages("MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- importTXT(file.path)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- cleanData(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
#' @return A data frame of cleaned annotated data.
#'
#' @export
cleanData <- function(dataName,
includeIDs = NULL,
excludeIDs = NULL,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2, #percentage of samples with no call
QD.threshold = 5,
saveRData = FALSE,
savePath = NULL,
label = NULL) {
#get subset of the data
if (!is.null(excludeIDs)) {
data_sub <- dataName[, ! colnames(dataName) %in% excludeIDs]
} else {
data_sub <- dataName
}
if (is.null(includeIDs)) {
stop("Please specify IDs to be included (this must match the IDs in the imported data file.")
} else {
checkID <- which(!includeIDs %in% colnames(data_sub))
if (length(checkID) > 0) {
stop(paste0(paste0(includeIDs[checkID],collapse = ","), " does not match ID in the imported data file"))
}
subject_id <- includeIDs[includeIDs %in% colnames(rawData)]
if (!is.null(excludeIDs)){
subject_id <- subject_id[!subject_id %in% excludeIDs]
}
}
cat("Included subject IDs: ")
cat(subject_id, "\n")
#extract individual genotype "GT" from genotype columns
cat("Extract individual genotype [GT] from genotype columns \n ")
data_sub_1 <- data_sub
for (i in 1:length(subject_id)) {
col_to_extract <- subject_id[i]
col_GT <- paste0(subject_id[i], "_GT")
data_sub_1[,col_GT] <- sapply(data_sub_1[,col_to_extract],FUN = function(x) {
stringr::str_sub(x, start = 1, end = 3)
})
}
cat("Individual genotypes saved in new columns: ")
cat(colnames(data_sub_1)[(ncol(data_sub) + 1):ncol(data_sub_1)], "\n")
# Remove variants with only "0/0" and "./." genotypes across all individuals
data_sub_1 <- data_sub_1[
!apply(data_sub_1[,paste0(subject_id, "_GT"), drop=FALSE],1, FUN = function(x) {
all(x %in% c( "0/0","./."))
})
,]
#Extract [QD] from INFO column
data_sub_3 <- data_sub_1
data_sub_3$QD_fromINFO <- sapply(data_sub_1$INFO, FUN=function(x) {
string_todetect<- x
length_string <- stringr::str_length(string_todetect)
QD_INFO_index <- stringr::str_locate( string_todetect, "QD")
endpoint_index <- QD_INFO_index[1] - 1 +  stringr::str_locate(stringr::str_sub(string_todetect, start=QD_INFO_index[1], end = length_string), ";")[1] -1
startpoint_index <- QD_INFO_index[1] + 3
QD_number <- stringr::str_sub(string_todetect, start = startpoint_index, end = endpoint_index)
return(QD_number)
})
data_sub_3$QD_fromINFO <- as.numeric(data_sub_3$QD_fromINFO)
cat("QD extracted from INFO column and saved in a new column: QD_fromINFO", "\n")
cat(paste0("Total number of variants in raw data: ", nrow(data_sub_3)), "\n")
if (removeMultiallelicSites) {
data_sub_3 <- data_sub_3[!unlist(sapply(data_sub_3[,"ALT"],FUN=function(alt) grepl(",", alt))),]
n_multiallelic <- nrow(data_sub_3)
cat("Number of variants left after removing multiallelic sites: ", n_multiallelic, "\n")
}
if (QD.threshold > 0) {
data_sub_3 <- data_sub_3[as.numeric(data_sub_3$QD_fromINFO) >= QD.threshold,]
n_QD <- nrow(data_sub_3)
cat("Number of variants left after removing variants with QD lower than ", QD.threshold, ": ", n_QD, "\n")
}
if (remove.nocall.pct >0 ) {
data_sub_3 <- data_sub_3[apply(data_sub_3[, c(paste0(subject_id,"_GT")), drop = FALSE], 1, FUN= function(row) mean(row == "./.")) < remove.nocall.pct, ]
n_remove.nocall <- nrow(data_sub_3)
cat("Number of variants left after removing variants with percentage of no calls more than ", remove.nocall.pct, ": ", n_remove.nocall, "\n")
}
#save data
if (saveRData) {
assign(label, data_sub_3)
if (is.null(savePath)) {
savePath <- paste0(getwd(),"/")
warning(paste0("Save path not specified. Data will be saved at the working directory ",getwd()))
}
suppressWarnings(dir.create(savePath))
save(list = paste0(label), file = paste0(savePath, label, ".RData"))
cat("Saved object path: ")
cat(paste0(savePath, label, ".RData"), "\n")
}
return(data_sub_3)
}
cleanedData <- cleanData(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
filteredVariants <- filterVariant(data.name = cleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
remove.packages("MDfilter")
update.packages("rlang")
update.packages()
update.packages("rlang")
update.packages("rlang",ask = FALSE)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang")
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
setwd("E:/Rpackage/MDfilter/")
use_mit_license()
install.packages("license")
install.packages("usethis")
install.packages("usethis")
library(usethis)
usethis::use_mit_license("Wei Zhou")
