include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
source("MDfilter/R/filter.variant.R")
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
?data
gene_coordinates <- read.table("DataExample/gencode.v19.annotation.gtf.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
gene_coordinates <- read.table("MDfilter/data/gencode.v19.annotation.gtf.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
save(gene_coordinates, file = "MDfilter/data/gene_coordinates.RData")
library(roxygen2)
save_path <- paste0("")
if(!dir.exists(save_path)){
dir.create(save_path, recursive = TRUE)
}
save_path <- setwd()
save_path <- getwd()
save_path <- getwd()
warning(paste0("Save path not specified. Data will be saved at the working directory",getwd()))
source("MDfilter/R/filter.variant.R")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
?kinship2::pedigree()
devtools::document()
setwd("MDfilter/")
devtools::document()
warnings
warnings()
warnings()
devtools::document()
devtools::document()
library(MDfilter)
View(MDfilter)
?MDfilter
?clean.raw.data
devtools::install_github("vivizhou/MDfilter")
library(MDfilter)
?plot.pedigreeGT
?plot.pedigreeGT
?plot.pedigreeGT
?plot.pedigreeGT
library(MDfilter)
?plot.pedigreeGT
remove.packages(MDfilter)
remove.packages("MDfilter")
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
library(MDfilter)
?plot.pedigreeGT
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
libary(MDfilter)
library(MDfilter)
file.path <- "DataExample/Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
unaffectedIDs
library(readxl)
pedigreePlot <- read_excel("DataExample/Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
```{r pressure, echo=FALSE}
```{r pressure, echo=TRUE}
pedigreePlot <- read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
affectedIDs
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
Paste0("affected IDs: " affectedIDs)
Paste0("affected IDs: ", affectedIDs)
paste0("affected IDs: ", affectedIDs)
```{r pressure, echo=TRUE}
```{r, echo=TRUE}
```{r}
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
View(clean.raw.data)
includedSubjectIDs %in% rownames(rawData)
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
setwd("E:/Rpackage/MDfilter/")
devtools::document()
devtools::install_github("vivizhou/MDfilter")
library(MDfilter)
remove.packages("MDfilter")
rm(MDfilter)
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
?clean.raw.data
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
?clean.raw.data
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
rm(MDfilter)
remove.packages("MDfilter")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
devtools::install_github("vivizhou/MDfilter")
devtools::install_github("vivizhou/MDfilter")
---
title: "ExampleMDfilter"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
```
## Import txt file from ANNOVAR annotation on vcf files
```{r}
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
```
## Import pedigree file
```{r}
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
```
Get included IDs (match the variant data file), affected IDs, and unaffected IDs. Also specify female and male IDs if X-linked recessive is assumed.
```{r}
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
```
## Clean imported data file
```{r}
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
```
## Filter the variants
```{r}
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
filteredVariants <- filter.variant(data.name = cleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
plot.pedigreeGT(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
plot.pedigreeGT(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
?plot.pedigreeGT
plot(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
View(plotPedigree)
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
remove.packages("MDfilter")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- importTXT(file.path)
importTXT
?importTXT
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
library(MDfilter)
getwd()
file.path <- "Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- importTXT(file.path)
pedigreePlot <- readxl::read_excel("Belgian.ped.osteoporosis.xlsx", na = "NA", sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
paste0("Affected IDs: ", affectedIDs)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
paste0("Unaffected IDs: ", unaffectedIDs)
cleanedData <- cleanData(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
knitr::opts_chunk$set(echo = TRUE)
if (!require(MDfilter)) {
devtools::install_github("vivizhou/MDfilter")
}
if (!require(tidyverse)) {
install.packages(tidyverse)
}
library(MDfilter)
library(tidyverse)
getwd()
filteredVariants <- filterVariant(data.name = cleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant",
femaleIDs = NULL,
maleIDs = NULL,
gene.name = NULL,
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE,
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
plotPedigree(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
includeIDs = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
savePNG = FALSE,
label = "testPlot")
