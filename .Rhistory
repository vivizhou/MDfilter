pedpre_GT
pedpre_GT$id
pedpre_GT$father
?pedigree
ped <- pedigree(id = pedpre_GT$id,
dadid = pedpre_GT$father, momid = pedpre_GT$mother, sex = pedpre_GT$gender,
as.matrix(data.frame(Affected = pedpre_GT$affected, DNA = pedpre_GT$avail)))
ped <- pedigree(id = pedpre_GT$id,
dadid = pedpre_GT$father, momid = pedpre_GT$mother, sex = pedpre_GT$gender,
as.matrix(data.frame(Affected = pedpre_GT$affected, DNA = pedpre_GT$avail)),
missid = c(0,NA))
pedpre_GT
pedpre_GT$father[pedpre_GT$father == 0] <- NA
pedpre_GT$father[pedpre_GT$mother == 0] <- NA
ped <- pedigree(id = pedpre_GT$id,
dadid = pedpre_GT$father, momid = pedpre_GT$mother, sex = pedpre_GT$gender,
as.matrix(data.frame(Affected = pedpre_GT$affected, DNA = pedpre_GT$avail)))
variant <- variant.list[i,]
variant_variant <- variant$Variant
variant_pos <- paste0(variant$Chr,"_", variant$Start)
variant_mutation <- paste0("Ref: ",variant$Ref, "; Alt: ", variant$Alt)
variant_gene <- paste0(variant$Gene.refgene)
variant_AAchange <- paste0(variant$AAChange.refgene)
variant_frequency <- c()
for (freqSource in frequency.col) {
variant_frequency <- c(variant_frequency,
paste0(freqSource,": ",variant[paste0(freqSource)]))
}
variant_frequency <- paste0(variant_frequency, collapse = ";")
variant_CADD <- variant$CADD_phred
variant_Func1 <- paste0(variant$Func.refgene)
variant_Func2 <- paste0(variant$ExonicFunc.refgene.VI)
GT_info <- as.data.frame(t(as.vector((variant[paste0(family.members.id, "_GT")]))))
GT <- data.frame(id = (family.members.id),
GT = ((GT_info)),
stringsAsFactors = FALSE)
colnames(GT)[2] <- "GT"
pedpre_GT <- left_join(pedigree.data, GT, by = "id")
pedpre_GT$father[pedpre_GT$father == 0] <- NA
pedpre_GT$mother[pedpre_GT$mother == 0] <- NA
ped <- pedigree(id = pedpre_GT$id,
dadid = pedpre_GT$father, momid = pedpre_GT$mother, sex = pedpre_GT$gender,
as.matrix(data.frame(Affected = pedpre_GT$affected, DNA = pedpre_GT$avail)))
pedigreePlot <- read_excel("DataExample/Belgian.ped.osteoporosis.xlsx", na = "NA",
sheet = 1)
head(pedigreePlot)
pedigree.data = pedigreePlot
variant <- variant.list[i,]
variant_variant <- variant$Variant
variant_pos <- paste0(variant$Chr,"_", variant$Start)
variant_mutation <- paste0("Ref: ",variant$Ref, "; Alt: ", variant$Alt)
variant_gene <- paste0(variant$Gene.refgene)
variant_AAchange <- paste0(variant$AAChange.refgene)
variant_frequency <- c()
for (freqSource in frequency.col) {
variant_frequency <- c(variant_frequency,
paste0(freqSource,": ",variant[paste0(freqSource)]))
}
variant_frequency <- paste0(variant_frequency, collapse = ";")
variant_CADD <- variant$CADD_phred
variant_Func1 <- paste0(variant$Func.refgene)
variant_Func2 <- paste0(variant$ExonicFunc.refgene.VI)
GT_info <- as.data.frame(t(as.vector((variant[paste0(family.members.id, "_GT")]))))
GT <- data.frame(id = (family.members.id),
GT = ((GT_info)),
stringsAsFactors = FALSE)
colnames(GT)[2] <- "GT"
pedpre_GT <- left_join(pedigree.data, GT, by = "id")
pedpre_GT$father[pedpre_GT$father == 0] <- NA
pedpre_GT$mother[pedpre_GT$mother == 0] <- NA
ped <- pedigree(id = pedpre_GT$id,
dadid = pedpre_GT$father, momid = pedpre_GT$mother, sex = pedpre_GT$gender,
as.matrix(data.frame(Affected = pedpre_GT$affected, DNA = pedpre_GT$avail)))
strid <- paste(pedpre_GT$id, pedpre_GT$GT, sep = "\n")
if (variant_ExAC_All <= 0.001 | is.na(variant_ExAC_All)) {
if(variant_1000G_ALL <= 0.001 | is.na(variant_1000G_ALL)){
path_name_sep <- paste0(path_name, "/freq_ALL_below_0.001")
dir.create(path_name_sep)
png(paste0(path_name_sep, "/", variant_pos, ".png"), width = 786, height = 551)#, width = 1350, height = 580
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
"rs number:", variant_rs, "\n",
variant_gene, "\n",
"ExAC_ALL=",variant_ExAC_All, "\n",
"1000G_ALL=",variant_1000G_ALL,"\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
pedigree.legend(ped, location = "bottomright", radius = .1 )
dev.off()
} else {
png(paste0(path_name, "/", variant_pos, ".png"), width = 786, height = 551)#, width = 1350, height = 580
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
"rs number:", variant_rs, "\n",
variant_gene, "\n",
"ExAC_ALL=",variant_ExAC_All, "\n",
"1000G_ALL=",variant_1000G_ALL,"\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
pedigree.legend(ped, location = "bottomright", radius = .1 )
dev.off()
}
} else {
png(paste0(path_name, "/", variant_pos, ".png"), width = 786, height = 551)#, width = 1350, height = 580
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
"rs number:", variant_rs, "\n",
variant_gene, "\n",
"ExAC_ALL=",variant_ExAC_All, "\n",
"1000G_ALL=",variant_1000G_ALL,"\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
pedigree.legend(ped, location = "bottomright", radius = .1 )
dev.off()
}
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
"rs number:", variant_rs, "\n",
variant_gene, "\n",
"Frequency=",variant_frequency, "\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
strid <- paste(pedpre_GT$id, pedpre_GT$GT, sep = "\n")
?plot.pedigree
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
rm(plot.pedigree())
rm(plot.pedigree)
require(kinship2)
plot.pedigree(ped, id = strid, mar = c(12, 4.1, 4.1, 4.1))
plot.pedigree(ped, id = strid, mar = c(12, 2.1, 2.1, 2.1))
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
"rs number:", variant_rs, "\n",
variant_gene, "\n",
"Frequencies::",variant_frequency, "\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
variant_mut <- paste0("Ref: ",variant$Ref, "; Alt: ", variant$Alt)
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
"rs number:", variant_rs, "\n",
variant_gene, "\n",
"Frequencies::",variant_frequency, "\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
variant_gene, "\n",
"Frequencies::",variant_frequency, "\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
pedigree.legend(ped, location = "bottomright", radius = .1 )
dev.off()
png(paste0(path_name, variant_pos,".png"))
png(paste0(path_name, "/", variant_pos, ".png"), width = 786, height = 551)#, width = 1350, height = 580
if(!dir.exists(path_name)){
dir.create(path_name)
}
path_name <- paste0(save.path, "/",label)
if (!is.null(gene.name)) {
path_name <- paste0(path_name, "/", gene.name)
variant.list <- variant.list[variant.list$Gene.refgene %in% gene.name,]
}
if(!dir.exists(path_name)){
dir.create(path_name)
}
path_name <- paste0(save.path, "/",label)
path_name
if (!is.null(gene.name)) {
path_name <- paste0(path_name, "/", gene.name)
variant.list <- variant.list[variant.list$Gene.refgene %in% gene.name,]
}
path_name
if(!dir.exists(path_name)){
dir.create(path_name)
}
path_name
dir.create(path_name)
if(!dir.exists(path_name)){
dir.create(path_name)
}
path_name <- paste0(save.path, "/",label)
if(!dir.exists(path_name)){
dir.create(path_name)
}
if (!is.null(gene.name)) {
path_name <- paste0(path_name, "/", gene.name)
variant.list <- variant.list[variant.list$Gene.refgene %in% gene.name,]
}
if(!dir.exists(path_name)){
dir.create(path_name)
}
png(paste0(path_name, "/", variant_pos, ".png"), width = 786, height = 551)#, width = 1350, height = 580
plot.pedigree(ped, id = strid, mar = c(12, 2.1, 2.1, 2.1))
mtext(text = paste0(variant_v, "\n",
variant_pos, ";", variant_mut, "\n",
variant_gene, "\n",
"Frequencies::",variant_frequency, "\n",
"CADD=",variant_CADD, "\n",
"Func.refgene: ", variant_Func1,", ", "ExonicFunc: ", variant_Func2, "\n",
"AAchange:", variant_AAchange),
side = 1, at = 0, adj=0)
pedigree.legend(ped, location = "bottomright", radius = .1 )
dev.off()
ped <- pedigree(id = pedpre_GT$id,
dadid = pedpre_GT$father,
momid = pedpre_GT$mother,
sex = pedpre_GT$gender,
status = pedpre_GT$status,
as.matrix(data.frame(Affected = pedpre_GT$affected, DNA = pedpre_GT$avail)))
strid <- paste(pedpre_GT$id, pedpre_GT$GT, sep = "\n")
plot.pedigree(ped, id = strid, mar = c(12, 2.1, 2.1, 2.1))
?plot.pedigree
?pedigree
source("MDfilter/R/plot.pedigree.R")
source("MDfilter/R/plot.pedigreeGT.R")
pedigreePlot <- read_excel("DataExample/Belgian.ped.osteoporosis.xlsx", na = "NA",
sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[pedigreePlot$affected == 2, "id", drop = TRUE]
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 1, "id", drop = TRUE]
plot.pedigreeGT(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
View(plot.pedigreeGT)
path_name <- paste0(save.path, "/",label)
path_name
if(!dir.exists(path_name)){
dir.create(path_name)
}
if (!is.null(gene.name)) {
path_name <- paste0(path_name, "/", gene.name)
variant.list <- variant.list[variant.list$Gene.refgene %in% gene.name,]
}
if(!dir.exists(path_name)){
dir.create(path_name)
}
paste0(path_name, "/", variant_pos, ".png")
plot.pedigreeGT(variant.list = filteredVariants,
pedigree.data = pedigreePlot,
family.members.id = includedSubjectIDs,
gene.name = "APC",
save.path = "DataExample",
label = "testPlot")
setwd("E:/Rpackage/")
source("MDfilter/R/clean.raw.data.R")
source("MDfilter/R/import.txt.file.R")
source("MDfilter/R/filter.variant.R")
source("MDfilter/R/plot.pedigreeGT.R")
#load pedigree plot
library(readxl)
file.path <- "DataExample/Familial_AFF.SNV.99.8.slt.vcf.full_annotation.txt"
rawData <- import.txt.file(file.path)
#specify the subject IDs with sequencing data in the data file
pedigreePlot <- read_excel("DataExample/Belgian.ped.osteoporosis.xlsx", na = "NA",
sheet = 1)
head(pedigreePlot)
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[pedigreePlot$affected == 2, "id", drop = TRUE]
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 1, "id", drop = TRUE]
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
load(file= "DataExample/testCleanedData.RData")
subdata <- testCleanedData
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
gene_coordinates <- read.table("DataExample/gencode.v19.annotation.gtf.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
affectedIDs <- pedigreePlot[pedigreePlot$affected == 2, "id", drop = TRUE]
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 1, "id", drop = TRUE]
familyIDs <- pedigreePlot$id
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[pedigreePlot$affected == 1, "id", drop = TRUE]
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0, "id", drop = TRUE]
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
#load(file= "DataExample/testCleanedData.RData")
subdata <- testCleanedData
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
includedSubjectIDs
View(filter.variant)
paste0(affected.id, collapse = ",")
affected.id = affectedIDs
affectedIDs
pedigreePlot$affected == 1
includedSubjectIDs <- familyIDs[familyIDs %in% colnames(rawData)]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
cleanedData <- clean.raw.data(rawData, includeIDs = includedSubjectIDs,
removeMultiallelicSites = FALSE,
remove.nocall.pct = 0.2,
QD.threshold = 5,
saveRData = FALSE, savePath = "DataExample/",
label = "testCleanedData")
#load(file= "DataExample/testCleanedData.RData")
subdata <- testCleanedData
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
unaffectedIDs <- pedigreePlot[pedigreePlot$affected == 0 & !is.na(pedigreePlot$affected == 0), "id", drop = TRUE]
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
View(filter.variant)
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1)), "id", drop = TRUE]
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1), "id", drop = TRUE]
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
source("MDfilter/R/filter.variant.R")
filteredVariants <- filter.variant(data.name = testCleanedData,
family.members.id = includedSubjectIDs,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
?data
gene_coordinates <- read.table("DataExample/gencode.v19.annotation.gtf.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
gene_coordinates <- read.table("MDfilter/data/gencode.v19.annotation.gtf.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
save(gene_coordinates, file = "MDfilter/data/gene_coordinates.RData")
library(roxygen2)
save_path <- paste0("")
if(!dir.exists(save_path)){
dir.create(save_path, recursive = TRUE)
}
save_path <- setwd()
save_path <- getwd()
save_path <- getwd()
warning(paste0("Save path not specified. Data will be saved at the working directory",getwd()))
source("MDfilter/R/filter.variant.R")
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
affectedIDs <- pedigreePlot[(pedigreePlot$affected == 1) & !is.na(pedigreePlot$affected), "id", drop = TRUE]
filteredVariants <- filter.variant(data.name = testCleanedData,
affected.id = affectedIDs,
unaffected.id = unaffectedIDs,
inheritance.pattern = "dominant", #"recessive"/"dominant"/"XLD"/"XLR" [specify "dominant" for de novo variant filtering]
femaleIDs = NULL,
maleIDs = NULL, # specify female and male IDs if choose X-linked recessive(XLR)
gene.name = NULL, # specify gene list for candidate gene analysis
frequency.col = c("ExAC_All", "X1000G_ALL", "ExAC_NFE", "X1000G_EUR"),
freq.threshold = 0.005,
protein.altering = TRUE, # if true only include exonic, splicing, stopgain, stoploss; excluding synonymous variants and UTRs unless specified
include.UTRs = FALSE,
include.synonymous = FALSE,
include.nonframeshift = FALSE,
CADD.threshold = 15,
save.path = "DataExample/",
save.txt = TRUE,
label = "test",
save.genelist = TRUE)
?kinship2::pedigree()
devtools::document()
setwd("MDfilter/")
devtools::document()
warnings
warnings()
warnings()
devtools::document()
devtools::document()
library(MDfilter)
View(MDfilter)
?MDfilter
?clean.raw.data
